
Sample_and_board_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  0000067e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d52  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a7  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066a  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fc  00000000  00000000  00002c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	b4 c0       	rjmp	.+360    	; 0x170 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	ba c0       	rjmp	.+372    	; 0x198 <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e0       	ldi	r30, 0x0A	; 10
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	af 31       	cpi	r26, 0x1F	; 31
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b1 d1       	rcall	.+866    	; 0x3ca <main>
  68:	ce c2       	rjmp	.+1436   	; 0x606 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <notmybusiness_decoder>:
	if ((befehl>=BEFEHLNR) || (befehl==0))decoderbytenr=0;
	else befehllut[befehl](++decoderbytenr, character);
}

void notmybusiness_decoder(uint32_t position, uint8_t datum)
{
  6c:	08 95       	ret

0000006e <set_sample_freq_decoder>:
}
typedef union {uint8_t byte[4];float result;}byte_to_float;
void set_sample_freq_decoder(uint32_t position, uint8_t datum)
{
	static byte_to_float data;
	if (position==1);
  6e:	61 30       	cpi	r22, 0x01	; 1
  70:	71 05       	cpc	r23, r1
  72:	81 05       	cpc	r24, r1
  74:	91 05       	cpc	r25, r1
  76:	61 f1       	breq	.+88     	; 0xd0 <set_sample_freq_decoder+0x62>
	else if (position==2)data.byte[0]=datum;
  78:	62 30       	cpi	r22, 0x02	; 2
  7a:	71 05       	cpc	r23, r1
  7c:	81 05       	cpc	r24, r1
  7e:	91 05       	cpc	r25, r1
  80:	19 f4       	brne	.+6      	; 0x88 <set_sample_freq_decoder+0x1a>
  82:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_end>
  86:	08 95       	ret
	else if (position==3)data.byte[1]=datum;
  88:	63 30       	cpi	r22, 0x03	; 3
  8a:	71 05       	cpc	r23, r1
  8c:	81 05       	cpc	r24, r1
  8e:	91 05       	cpc	r25, r1
  90:	19 f4       	brne	.+6      	; 0x98 <set_sample_freq_decoder+0x2a>
  92:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <__data_end+0x1>
  96:	08 95       	ret
	else if (position==4)data.byte[2]=datum;
  98:	64 30       	cpi	r22, 0x04	; 4
  9a:	71 05       	cpc	r23, r1
  9c:	81 05       	cpc	r24, r1
  9e:	91 05       	cpc	r25, r1
  a0:	19 f4       	brne	.+6      	; 0xa8 <set_sample_freq_decoder+0x3a>
  a2:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end+0x2>
  a6:	08 95       	ret
	else if (position==5)
  a8:	65 30       	cpi	r22, 0x05	; 5
  aa:	71 05       	cpc	r23, r1
  ac:	81 05       	cpc	r24, r1
  ae:	91 05       	cpc	r25, r1
  b0:	79 f4       	brne	.+30     	; 0xd0 <set_sample_freq_decoder+0x62>
	{
		data.byte[3]=datum;
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	43 83       	std	Z+3, r20	; 0x03
		samplefreq=data.result;
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	a2 81       	ldd	r26, Z+2	; 0x02
  be:	b3 81       	ldd	r27, Z+3	; 0x03
  c0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <samplefreq>
  c4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <samplefreq+0x1>
  c8:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <samplefreq+0x2>
  cc:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <samplefreq+0x3>
  d0:	08 95       	ret

000000d2 <get_status_decoder>:
	}
}

void get_status_decoder(uint32_t position, uint8_t datum)
{
  d2:	08 95       	ret

000000d4 <start_kont_decoder>:
	
}

void start_kont_decoder(uint32_t position, uint8_t datum)
{
	set_sample_freq(samplefreq);
  d4:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <samplefreq>
  d8:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <samplefreq+0x1>
  dc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <samplefreq+0x2>
  e0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <samplefreq+0x3>
  e4:	d5 d0       	rcall	.+426    	; 0x290 <set_sample_freq>
  e6:	08 95       	ret

000000e8 <start_startstop_decoder>:
}

void start_startstop_decoder(uint32_t position, uint8_t datum)
{
	set_sample_freq(samplefreq);
  e8:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <samplefreq>
  ec:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <samplefreq+0x1>
  f0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <samplefreq+0x2>
  f4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <samplefreq+0x3>
  f8:	cb d0       	rcall	.+406    	; 0x290 <set_sample_freq>
  fa:	08 95       	ret

000000fc <stop_decoder>:
}

void stop_decoder(uint32_t position, uint8_t datum)
{
	set_sample_freq(0);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	cb 01       	movw	r24, r22
 102:	c6 d0       	rcall	.+396    	; 0x290 <set_sample_freq>
 104:	08 95       	ret

00000106 <init_com>:
uint8_t read_com();

void init_com()
{
	//Init decoder
	decoderbytenr=0;
 106:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <decoderbytenr>
 10a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <decoderbytenr+0x1>
 10e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <decoderbytenr+0x2>
 112:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <decoderbytenr+0x3>
	//befehllut[0]=&nofault;
	befehllut[GET_PARAMETER]=&notmybusiness_decoder;
 116:	e5 e0       	ldi	r30, 0x05	; 5
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	86 e3       	ldi	r24, 0x36	; 54
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	93 83       	std	Z+3, r25	; 0x03
 120:	82 83       	std	Z+2, r24	; 0x02
	befehllut[SET_PARAMETER]=&notmybusiness_decoder;
 122:	95 83       	std	Z+5, r25	; 0x05
 124:	84 83       	std	Z+4, r24	; 0x04
	befehllut[GET_DATEN]=&notmybusiness_decoder;
 126:	97 83       	std	Z+7, r25	; 0x07
 128:	86 83       	std	Z+6, r24	; 0x06
	befehllut[START_KONT]=&start_kont_decoder;
 12a:	8a e6       	ldi	r24, 0x6A	; 106
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	91 87       	std	Z+9, r25	; 0x09
 130:	80 87       	std	Z+8, r24	; 0x08
	befehllut[START_STARTSTOP]=&start_startstop_decoder;
 132:	84 e7       	ldi	r24, 0x74	; 116
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	93 87       	std	Z+11, r25	; 0x0b
 138:	82 87       	std	Z+10, r24	; 0x0a
	befehllut[STOP]=&stop_decoder;
 13a:	8e e7       	ldi	r24, 0x7E	; 126
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	95 87       	std	Z+13, r25	; 0x0d
 140:	84 87       	std	Z+12, r24	; 0x0c
	befehllut[SET_SAMPLE_FREQ]=&set_sample_freq_decoder;
 142:	87 e3       	ldi	r24, 0x37	; 55
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	97 87       	std	Z+15, r25	; 0x0f
 148:	86 87       	std	Z+14, r24	; 0x0e
	befehllut[GET_STATUS]=&get_status_decoder;
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	91 8b       	std	Z+17, r25	; 0x11
 150:	80 8b       	std	Z+16, r24	; 0x10
	
	DDRB &= ~(1<<PINB2);
 152:	22 98       	cbi	0x04, 2	; 4
	PCICR |= (1<<PCIE0);
 154:	e8 e6       	ldi	r30, 0x68	; 104
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 15e:	eb e6       	ldi	r30, 0x6B	; 107
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 83       	st	Z, r24
	
	SPCR |= (1<<SPIE) | (1<<SPE);
 168:	8c b5       	in	r24, 0x2c	; 44
 16a:	80 6c       	ori	r24, 0xC0	; 192
 16c:	8c bd       	out	0x2c, r24	; 44
 16e:	08 95       	ret

00000170 <__vector_3>:
	
}

ISR(PCINT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
	if(PINB & (1<<PINB2))
 17a:	1a 9b       	sbis	0x03, 2	; 3
 17c:	08 c0       	rjmp	.+16     	; 0x18e <__vector_3+0x1e>
	{
		decoderbytenr=0;
 17e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <decoderbytenr>
 182:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <decoderbytenr+0x1>
 186:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <decoderbytenr+0x2>
 18a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <decoderbytenr+0x3>
	}
	else
	{
		
	}
}
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_17>:

ISR(SPI_STC_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	SPDR = character;
}

uint8_t read_com()
{
	return(SPDR);
 1ba:	4e b5       	in	r20, 0x2e	; 46

ISR(SPI_STC_vect)
{
	static BEFEHL befehl;
	uint8_t character=read_com();
	if (decoderbytenr==0)
 1bc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <decoderbytenr>
 1c0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <decoderbytenr+0x1>
 1c4:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <decoderbytenr+0x2>
 1c8:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <decoderbytenr+0x3>
 1cc:	89 2b       	or	r24, r25
 1ce:	8a 2b       	or	r24, r26
 1d0:	8b 2b       	or	r24, r27
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <__vector_17+0x40>
	{
		befehl=(BEFEHL)character;
 1d4:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <befehl.1654>
	}
	if ((befehl>=BEFEHLNR) || (befehl==0))decoderbytenr=0;
 1d8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <befehl.1654>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	8e 0f       	add	r24, r30
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	48 f0       	brcs	.+18     	; 0x1f6 <__vector_17+0x5e>
 1e4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <decoderbytenr>
 1e8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <decoderbytenr+0x1>
 1ec:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <decoderbytenr+0x2>
 1f0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <decoderbytenr+0x3>
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__vector_17+0x9c>
	else befehllut[befehl](++decoderbytenr, character);
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	eb 5f       	subi	r30, 0xFB	; 251
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	01 90       	ld	r0, Z+
 202:	f0 81       	ld	r31, Z
 204:	e0 2d       	mov	r30, r0
 206:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <decoderbytenr>
 20a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <decoderbytenr+0x1>
 20e:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <decoderbytenr+0x2>
 212:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <decoderbytenr+0x3>
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	8f 4f       	sbci	r24, 0xFF	; 255
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <decoderbytenr>
 226:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <decoderbytenr+0x1>
 22a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <decoderbytenr+0x2>
 22e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <decoderbytenr+0x3>
 232:	09 95       	icall
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <init_freq>:
#include "global.h"
#include <avr/io.h>

void init_freq()
{
	OSCCAL=0x53;										//Enhance the factory calibration, if possible
 256:	83 e5       	ldi	r24, 0x53	; 83
 258:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__EEPROM_REGION_LENGTH__+0x7f0066>
	DDRB |= (1<<SAMPLE);								//Set the sampe-pin
 25c:	21 9a       	sbi	0x04, 1	; 4
	
	TCCR1A |= (1<<COM1A0) | (1<<WGM11) | (1<<WGM10) ;	//Toggle the sample pin on compare match
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	83 64       	ori	r24, 0x43	; 67
 266:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) ;					//Counter in mode 15: reset at OCR1A
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 61       	ori	r24, 0x18	; 24
 270:	80 83       	st	Z, r24
	samplefreq=1000;									//The Raspberry assumes a sample freq of 1kHz at start
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	aa e7       	ldi	r26, 0x7A	; 122
 278:	b4 e4       	ldi	r27, 0x44	; 68
 27a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <samplefreq>
 27e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <samplefreq+0x1>
 282:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <samplefreq+0x2>
 286:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <samplefreq+0x3>
}

void set_sample_freq(float freq)
{
	double ticks;
	if (freq==0)SET_PRE_0;
 28a:	88 e1       	ldi	r24, 0x18	; 24
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <set_sample_freq>:
	samplefreq=1000;									//The Raspberry assumes a sample freq of 1kHz at start
	set_sample_freq(0);									//samplefreq is just a variable, to enable it, it must be activated
}

void set_sample_freq(float freq)
{
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
	double ticks;
	if (freq==0)SET_PRE_0;
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	a9 01       	movw	r20, r18
 2a2:	a0 d0       	rcall	.+320    	; 0x3e4 <__cmpsf2>
 2a4:	81 11       	cpse	r24, r1
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <set_sample_freq+0x20>
 2a8:	88 e1       	ldi	r24, 0x18	; 24
 2aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 2ae:	80 c0       	rjmp	.+256    	; 0x3b0 <set_sample_freq+0x120>
	else if (freq>92)
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	48 eb       	ldi	r20, 0xB8	; 184
 2b6:	52 e4       	ldi	r21, 0x42	; 66
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	a0 d1       	rcall	.+832    	; 0x5fe <__gesf2>
 2be:	18 16       	cp	r1, r24
 2c0:	84 f4       	brge	.+32     	; 0x2e2 <set_sample_freq+0x52>
	{
		ticks=6000000/(double)freq;		//(fosz/2/N) / freq
		SET_PRE_1;
 2c2:	89 e1       	ldi	r24, 0x19	; 25
 2c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		OCR1A=(uint16_t)ticks;
 2c8:	a7 01       	movw	r20, r14
 2ca:	96 01       	movw	r18, r12
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	7b e1       	ldi	r23, 0x1B	; 27
 2d0:	87 eb       	ldi	r24, 0xB7	; 183
 2d2:	9a e4       	ldi	r25, 0x4A	; 74
 2d4:	8b d0       	rcall	.+278    	; 0x3ec <__divsf3>
 2d6:	f2 d0       	rcall	.+484    	; 0x4bc <__fixunssfsi>
 2d8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 2dc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 2e0:	67 c0       	rjmp	.+206    	; 0x3b0 <set_sample_freq+0x120>
	}
	else if (freq>12)
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e4       	ldi	r20, 0x40	; 64
 2e8:	51 e4       	ldi	r21, 0x41	; 65
 2ea:	c7 01       	movw	r24, r14
 2ec:	b6 01       	movw	r22, r12
 2ee:	87 d1       	rcall	.+782    	; 0x5fe <__gesf2>
 2f0:	18 16       	cp	r1, r24
 2f2:	84 f4       	brge	.+32     	; 0x314 <set_sample_freq+0x84>
	{
		ticks=750000/(double)freq;
		SET_PRE_8;
 2f4:	8a e1       	ldi	r24, 0x1A	; 26
 2f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		OCR1A=(uint16_t)ticks;
 2fa:	a7 01       	movw	r20, r14
 2fc:	96 01       	movw	r18, r12
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	7b e1       	ldi	r23, 0x1B	; 27
 302:	87 e3       	ldi	r24, 0x37	; 55
 304:	99 e4       	ldi	r25, 0x49	; 73
 306:	72 d0       	rcall	.+228    	; 0x3ec <__divsf3>
 308:	d9 d0       	rcall	.+434    	; 0x4bc <__fixunssfsi>
 30a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 30e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 312:	4e c0       	rjmp	.+156    	; 0x3b0 <set_sample_freq+0x120>
	}
	else if (freq>1.44)
 314:	2c ee       	ldi	r18, 0xEC	; 236
 316:	31 e5       	ldi	r19, 0x51	; 81
 318:	48 eb       	ldi	r20, 0xB8	; 184
 31a:	5f e3       	ldi	r21, 0x3F	; 63
 31c:	c7 01       	movw	r24, r14
 31e:	b6 01       	movw	r22, r12
 320:	6e d1       	rcall	.+732    	; 0x5fe <__gesf2>
 322:	18 16       	cp	r1, r24
 324:	84 f4       	brge	.+32     	; 0x346 <set_sample_freq+0xb6>
	{
		ticks=93750/(double)freq;
		SET_PRE_64;
 326:	8b e1       	ldi	r24, 0x1B	; 27
 328:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		OCR1A=(uint16_t)ticks;
 32c:	a7 01       	movw	r20, r14
 32e:	96 01       	movw	r18, r12
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	7b e1       	ldi	r23, 0x1B	; 27
 334:	87 eb       	ldi	r24, 0xB7	; 183
 336:	97 e4       	ldi	r25, 0x47	; 71
 338:	59 d0       	rcall	.+178    	; 0x3ec <__divsf3>
 33a:	c0 d0       	rcall	.+384    	; 0x4bc <__fixunssfsi>
 33c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 340:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 344:	35 c0       	rjmp	.+106    	; 0x3b0 <set_sample_freq+0x120>
	}
	else if (freq>0.36)
 346:	2c ee       	ldi	r18, 0xEC	; 236
 348:	31 e5       	ldi	r19, 0x51	; 81
 34a:	48 eb       	ldi	r20, 0xB8	; 184
 34c:	5e e3       	ldi	r21, 0x3E	; 62
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	55 d1       	rcall	.+682    	; 0x5fe <__gesf2>
 354:	18 16       	cp	r1, r24
 356:	84 f4       	brge	.+32     	; 0x378 <set_sample_freq+0xe8>
	{
		ticks=23437.5/(double)freq;
		SET_PRE_256;
 358:	8c e1       	ldi	r24, 0x1C	; 28
 35a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		OCR1A=(uint16_t)ticks;
 35e:	a7 01       	movw	r20, r14
 360:	96 01       	movw	r18, r12
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	7b e1       	ldi	r23, 0x1B	; 27
 366:	87 eb       	ldi	r24, 0xB7	; 183
 368:	96 e4       	ldi	r25, 0x46	; 70
 36a:	40 d0       	rcall	.+128    	; 0x3ec <__divsf3>
 36c:	a7 d0       	rcall	.+334    	; 0x4bc <__fixunssfsi>
 36e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 372:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 376:	1c c0       	rjmp	.+56     	; 0x3b0 <set_sample_freq+0x120>
	}
	else if (freq>0.09)
 378:	2c ee       	ldi	r18, 0xEC	; 236
 37a:	31 e5       	ldi	r19, 0x51	; 81
 37c:	48 eb       	ldi	r20, 0xB8	; 184
 37e:	5d e3       	ldi	r21, 0x3D	; 61
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
 384:	3c d1       	rcall	.+632    	; 0x5fe <__gesf2>
 386:	18 16       	cp	r1, r24
 388:	84 f4       	brge	.+32     	; 0x3aa <set_sample_freq+0x11a>
	{
		ticks=5859.375/(double)freq;
		SET_PRE_1024;
 38a:	8d e1       	ldi	r24, 0x1D	; 29
 38c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		OCR1A=(uint16_t)ticks;
 390:	a7 01       	movw	r20, r14
 392:	96 01       	movw	r18, r12
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	7b e1       	ldi	r23, 0x1B	; 27
 398:	87 eb       	ldi	r24, 0xB7	; 183
 39a:	95 e4       	ldi	r25, 0x45	; 69
 39c:	27 d0       	rcall	.+78     	; 0x3ec <__divsf3>
 39e:	8e d0       	rcall	.+284    	; 0x4bc <__fixunssfsi>
 3a0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 3a4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <set_sample_freq+0x120>
	}
	else SET_PRE_0;
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	08 95       	ret

000003ba <Init>:
    }
}

void Init()
{
	PORTD |= (1<<CHARGE_EN) | (1<<BOOST_EN) | (1<<RUNNING);
 3ba:	8b b1       	in	r24, 0x0b	; 11
 3bc:	84 66       	ori	r24, 0x64	; 100
 3be:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<CHARGE_EN) | (1<<BOOST_EN) | (1<<RUNNING) | (1<<STATUS_CHARGE) | (1<<STATUS_DONE);
 3c0:	8a b1       	in	r24, 0x0a	; 10
 3c2:	8c 67       	ori	r24, 0x7C	; 124
 3c4:	8a b9       	out	0x0a, r24	; 10
	PORTB |= (1<<START_STOPBUTTON);
 3c6:	28 9a       	sbi	0x05, 0	; 5
 3c8:	08 95       	ret

000003ca <main>:
void Init();
void check_taster();

int main(void)
{
	cli();
 3ca:	f8 94       	cli
    Init();
 3cc:	f6 df       	rcall	.-20     	; 0x3ba <Init>
	init_freq();
 3ce:	43 df       	rcall	.-378    	; 0x256 <init_freq>
	DDRB |= (1<<SAMPLE);
 3d0:	21 9a       	sbi	0x04, 1	; 4
	
	init_com();
 3d2:	99 de       	rcall	.-718    	; 0x106 <init_com>
	sei();
 3d4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	87 eb       	ldi	r24, 0xB7	; 183
 3d8:	9b e0       	ldi	r25, 0x0B	; 11
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <main+0x10>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x16>
 3e0:	00 00       	nop
 3e2:	f9 cf       	rjmp	.-14     	; 0x3d6 <main+0xc>

000003e4 <__cmpsf2>:
 3e4:	97 d0       	rcall	.+302    	; 0x514 <__fp_cmp>
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <__cmpsf2+0x6>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret

000003ec <__divsf3>:
 3ec:	0c d0       	rcall	.+24     	; 0x406 <__divsf3x>
 3ee:	cd c0       	rjmp	.+410    	; 0x58a <__fp_round>
 3f0:	c5 d0       	rcall	.+394    	; 0x57c <__fp_pscB>
 3f2:	40 f0       	brcs	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f4:	bc d0       	rcall	.+376    	; 0x56e <__fp_pscA>
 3f6:	30 f0       	brcs	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f8:	21 f4       	brne	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	ae c0       	rjmp	.+348    	; 0x55c <__fp_inf>
 400:	51 11       	cpse	r21, r1
 402:	f7 c0       	rjmp	.+494    	; 0x5f2 <__fp_szero>
 404:	b1 c0       	rjmp	.+354    	; 0x568 <__fp_nan>

00000406 <__divsf3x>:
 406:	d2 d0       	rcall	.+420    	; 0x5ac <__fp_split3>
 408:	98 f3       	brcs	.-26     	; 0x3f0 <__divsf3+0x4>

0000040a <__divsf3_pse>:
 40a:	99 23       	and	r25, r25
 40c:	c9 f3       	breq	.-14     	; 0x400 <__LOCK_REGION_LENGTH__>
 40e:	55 23       	and	r21, r21
 410:	b1 f3       	breq	.-20     	; 0x3fe <__divsf3+0x12>
 412:	95 1b       	sub	r25, r21
 414:	55 0b       	sbc	r21, r21
 416:	bb 27       	eor	r27, r27
 418:	aa 27       	eor	r26, r26
 41a:	62 17       	cp	r22, r18
 41c:	73 07       	cpc	r23, r19
 41e:	84 07       	cpc	r24, r20
 420:	38 f0       	brcs	.+14     	; 0x430 <__divsf3_pse+0x26>
 422:	9f 5f       	subi	r25, 0xFF	; 255
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	44 1f       	adc	r20, r20
 42c:	aa 1f       	adc	r26, r26
 42e:	a9 f3       	breq	.-22     	; 0x41a <__divsf3_pse+0x10>
 430:	33 d0       	rcall	.+102    	; 0x498 <__divsf3_pse+0x8e>
 432:	0e 2e       	mov	r0, r30
 434:	3a f0       	brmi	.+14     	; 0x444 <__divsf3_pse+0x3a>
 436:	e0 e8       	ldi	r30, 0x80	; 128
 438:	30 d0       	rcall	.+96     	; 0x49a <__divsf3_pse+0x90>
 43a:	91 50       	subi	r25, 0x01	; 1
 43c:	50 40       	sbci	r21, 0x00	; 0
 43e:	e6 95       	lsr	r30
 440:	00 1c       	adc	r0, r0
 442:	ca f7       	brpl	.-14     	; 0x436 <__divsf3_pse+0x2c>
 444:	29 d0       	rcall	.+82     	; 0x498 <__divsf3_pse+0x8e>
 446:	fe 2f       	mov	r31, r30
 448:	27 d0       	rcall	.+78     	; 0x498 <__divsf3_pse+0x8e>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	bb 1f       	adc	r27, r27
 452:	26 17       	cp	r18, r22
 454:	37 07       	cpc	r19, r23
 456:	48 07       	cpc	r20, r24
 458:	ab 07       	cpc	r26, r27
 45a:	b0 e8       	ldi	r27, 0x80	; 128
 45c:	09 f0       	breq	.+2      	; 0x460 <__divsf3_pse+0x56>
 45e:	bb 0b       	sbc	r27, r27
 460:	80 2d       	mov	r24, r0
 462:	bf 01       	movw	r22, r30
 464:	ff 27       	eor	r31, r31
 466:	93 58       	subi	r25, 0x83	; 131
 468:	5f 4f       	sbci	r21, 0xFF	; 255
 46a:	2a f0       	brmi	.+10     	; 0x476 <__divsf3_pse+0x6c>
 46c:	9e 3f       	cpi	r25, 0xFE	; 254
 46e:	51 05       	cpc	r21, r1
 470:	68 f0       	brcs	.+26     	; 0x48c <__divsf3_pse+0x82>
 472:	74 c0       	rjmp	.+232    	; 0x55c <__fp_inf>
 474:	be c0       	rjmp	.+380    	; 0x5f2 <__fp_szero>
 476:	5f 3f       	cpi	r21, 0xFF	; 255
 478:	ec f3       	brlt	.-6      	; 0x474 <__divsf3_pse+0x6a>
 47a:	98 3e       	cpi	r25, 0xE8	; 232
 47c:	dc f3       	brlt	.-10     	; 0x474 <__divsf3_pse+0x6a>
 47e:	86 95       	lsr	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f7 95       	ror	r31
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	c9 f7       	brne	.-14     	; 0x47e <__divsf3_pse+0x74>
 48c:	88 0f       	add	r24, r24
 48e:	91 1d       	adc	r25, r1
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret
 498:	e1 e0       	ldi	r30, 0x01	; 1
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	bb 1f       	adc	r27, r27
 4a2:	62 17       	cp	r22, r18
 4a4:	73 07       	cpc	r23, r19
 4a6:	84 07       	cpc	r24, r20
 4a8:	ba 07       	cpc	r27, r26
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__divsf3_pse+0xaa>
 4ac:	62 1b       	sub	r22, r18
 4ae:	73 0b       	sbc	r23, r19
 4b0:	84 0b       	sbc	r24, r20
 4b2:	ba 0b       	sbc	r27, r26
 4b4:	ee 1f       	adc	r30, r30
 4b6:	88 f7       	brcc	.-30     	; 0x49a <__divsf3_pse+0x90>
 4b8:	e0 95       	com	r30
 4ba:	08 95       	ret

000004bc <__fixunssfsi>:
 4bc:	7f d0       	rcall	.+254    	; 0x5bc <__fp_splitA>
 4be:	88 f0       	brcs	.+34     	; 0x4e2 <__fixunssfsi+0x26>
 4c0:	9f 57       	subi	r25, 0x7F	; 127
 4c2:	90 f0       	brcs	.+36     	; 0x4e8 <__fixunssfsi+0x2c>
 4c4:	b9 2f       	mov	r27, r25
 4c6:	99 27       	eor	r25, r25
 4c8:	b7 51       	subi	r27, 0x17	; 23
 4ca:	a0 f0       	brcs	.+40     	; 0x4f4 <__fixunssfsi+0x38>
 4cc:	d1 f0       	breq	.+52     	; 0x502 <__stack+0x3>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	1a f0       	brmi	.+6      	; 0x4de <__fixunssfsi+0x22>
 4d8:	ba 95       	dec	r27
 4da:	c9 f7       	brne	.-14     	; 0x4ce <__fixunssfsi+0x12>
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <__stack+0x3>
 4de:	b1 30       	cpi	r27, 0x01	; 1
 4e0:	81 f0       	breq	.+32     	; 0x502 <__stack+0x3>
 4e2:	86 d0       	rcall	.+268    	; 0x5f0 <__fp_zero>
 4e4:	b1 e0       	ldi	r27, 0x01	; 1
 4e6:	08 95       	ret
 4e8:	83 c0       	rjmp	.+262    	; 0x5f0 <__fp_zero>
 4ea:	67 2f       	mov	r22, r23
 4ec:	78 2f       	mov	r23, r24
 4ee:	88 27       	eor	r24, r24
 4f0:	b8 5f       	subi	r27, 0xF8	; 248
 4f2:	39 f0       	breq	.+14     	; 0x502 <__stack+0x3>
 4f4:	b9 3f       	cpi	r27, 0xF9	; 249
 4f6:	cc f3       	brlt	.-14     	; 0x4ea <__fixunssfsi+0x2e>
 4f8:	86 95       	lsr	r24
 4fa:	77 95       	ror	r23
 4fc:	67 95       	ror	r22
 4fe:	b3 95       	inc	r27
 500:	d9 f7       	brne	.-10     	; 0x4f8 <__fixunssfsi+0x3c>
 502:	3e f4       	brtc	.+14     	; 0x512 <__stack+0x13>
 504:	90 95       	com	r25
 506:	80 95       	com	r24
 508:	70 95       	com	r23
 50a:	61 95       	neg	r22
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__fp_cmp>:
 514:	99 0f       	add	r25, r25
 516:	00 08       	sbc	r0, r0
 518:	55 0f       	add	r21, r21
 51a:	aa 0b       	sbc	r26, r26
 51c:	e0 e8       	ldi	r30, 0x80	; 128
 51e:	fe ef       	ldi	r31, 0xFE	; 254
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	e8 07       	cpc	r30, r24
 526:	f9 07       	cpc	r31, r25
 528:	c0 f0       	brcs	.+48     	; 0x55a <__fp_cmp+0x46>
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	98 f0       	brcs	.+38     	; 0x55a <__fp_cmp+0x46>
 534:	62 1b       	sub	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	95 0b       	sbc	r25, r21
 53c:	39 f4       	brne	.+14     	; 0x54c <__fp_cmp+0x38>
 53e:	0a 26       	eor	r0, r26
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_cmp+0x46>
 542:	23 2b       	or	r18, r19
 544:	24 2b       	or	r18, r20
 546:	25 2b       	or	r18, r21
 548:	21 f4       	brne	.+8      	; 0x552 <__fp_cmp+0x3e>
 54a:	08 95       	ret
 54c:	0a 26       	eor	r0, r26
 54e:	09 f4       	brne	.+2      	; 0x552 <__fp_cmp+0x3e>
 550:	a1 40       	sbci	r26, 0x01	; 1
 552:	a6 95       	lsr	r26
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	81 1d       	adc	r24, r1
 558:	81 1d       	adc	r24, r1
 55a:	08 95       	ret

0000055c <__fp_inf>:
 55c:	97 f9       	bld	r25, 7
 55e:	9f 67       	ori	r25, 0x7F	; 127
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	08 95       	ret

00000568 <__fp_nan>:
 568:	9f ef       	ldi	r25, 0xFF	; 255
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	08 95       	ret

0000056e <__fp_pscA>:
 56e:	00 24       	eor	r0, r0
 570:	0a 94       	dec	r0
 572:	16 16       	cp	r1, r22
 574:	17 06       	cpc	r1, r23
 576:	18 06       	cpc	r1, r24
 578:	09 06       	cpc	r0, r25
 57a:	08 95       	ret

0000057c <__fp_pscB>:
 57c:	00 24       	eor	r0, r0
 57e:	0a 94       	dec	r0
 580:	12 16       	cp	r1, r18
 582:	13 06       	cpc	r1, r19
 584:	14 06       	cpc	r1, r20
 586:	05 06       	cpc	r0, r21
 588:	08 95       	ret

0000058a <__fp_round>:
 58a:	09 2e       	mov	r0, r25
 58c:	03 94       	inc	r0
 58e:	00 0c       	add	r0, r0
 590:	11 f4       	brne	.+4      	; 0x596 <__fp_round+0xc>
 592:	88 23       	and	r24, r24
 594:	52 f0       	brmi	.+20     	; 0x5aa <__fp_round+0x20>
 596:	bb 0f       	add	r27, r27
 598:	40 f4       	brcc	.+16     	; 0x5aa <__fp_round+0x20>
 59a:	bf 2b       	or	r27, r31
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__fp_round+0x18>
 59e:	60 ff       	sbrs	r22, 0
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__fp_round+0x20>
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__fp_split3>:
 5ac:	57 fd       	sbrc	r21, 7
 5ae:	90 58       	subi	r25, 0x80	; 128
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	59 f0       	breq	.+22     	; 0x5cc <__fp_splitA+0x10>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__fp_splitA+0x1a>
 5ba:	47 95       	ror	r20

000005bc <__fp_splitA>:
 5bc:	88 0f       	add	r24, r24
 5be:	97 fb       	bst	r25, 7
 5c0:	99 1f       	adc	r25, r25
 5c2:	61 f0       	breq	.+24     	; 0x5dc <__fp_splitA+0x20>
 5c4:	9f 3f       	cpi	r25, 0xFF	; 255
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__fp_splitA+0x2a>
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	f2 cf       	rjmp	.-28     	; 0x5ba <__fp_split3+0xe>
 5d6:	46 95       	lsr	r20
 5d8:	f1 df       	rcall	.-30     	; 0x5bc <__fp_splitA>
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__fp_splitA+0x30>
 5dc:	16 16       	cp	r1, r22
 5de:	17 06       	cpc	r1, r23
 5e0:	18 06       	cpc	r1, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	f1 cf       	rjmp	.-30     	; 0x5c8 <__fp_splitA+0xc>
 5e6:	86 95       	lsr	r24
 5e8:	71 05       	cpc	r23, r1
 5ea:	61 05       	cpc	r22, r1
 5ec:	08 94       	sec
 5ee:	08 95       	ret

000005f0 <__fp_zero>:
 5f0:	e8 94       	clt

000005f2 <__fp_szero>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	66 27       	eor	r22, r22
 5f6:	77 27       	eor	r23, r23
 5f8:	cb 01       	movw	r24, r22
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__gesf2>:
 5fe:	8a df       	rcall	.-236    	; 0x514 <__fp_cmp>
 600:	08 f4       	brcc	.+2      	; 0x604 <__gesf2+0x6>
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	08 95       	ret

00000606 <_exit>:
 606:	f8 94       	cli

00000608 <__stop_program>:
 608:	ff cf       	rjmp	.-2      	; 0x608 <__stop_program>
